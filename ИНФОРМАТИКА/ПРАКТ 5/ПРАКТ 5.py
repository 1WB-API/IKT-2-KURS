# Практическая работа № 5
# Библиотека NumPy для работы с данными

import numpy as np

# =========================
# Задание 5.1. Библиотека NumPy. Массивы.
# =========================

# 1. Библиотека NumPy. Импорт библиотеки
# В начале работы импортируем библиотеку
import numpy as np

# 2. Массивы. Структура
# Массив (ndarray) — это многомерная структура данных, хранящая элементы одного типа.
# Позволяет эффективно работать с большими объемами числовых данных.
# Например:
array_example = np.array([1, 2, 3])
print("Пример массива:", array_example)

# 3. Создание массива. Функции array() и values()
# - np.array() — создаёт массив из переданных данных.
# - np.asarray() — тоже преобразует данные в массив, если это возможно.
# Пример:
list_data = [4, 5, 6]
array_from_list = np.array(list_data)
print("Массив из списка:", array_from_list)

# Значения массива можно получить через атрибут .values() — однако в numpy такого метода нет.
# Вместо этого используют просто массив. В pandas есть .values(), но в numpy достаточно просто массива.
# Поэтому пример с values() не применим для numpy.

# 4. Функции создания массива заданного вида
# np.zeros(shape) — массив нулей
zeros_array = np.zeros((3, 3))
print("Массив нулей:\n", zeros_array)

# np.ones(shape) — массив единиц
ones_array = np.ones((2, 4))
print("Массив единиц:\n", ones_array)

# np.empty(shape) — массив с неинициализированными значениями
empty_array = np.empty((2, 2))
print("Массив без инициализации:\n", empty_array)

# np.arange(start, stop, step) — последовательность чисел
arange_array = np.arange(0, 10, 2)
print("Массив с помощью arange:", arange_array)

# np.linspace(start, stop, num) — равномерное распределение точек
linspace_array = np.linspace(0, 1, 5)
print("Массив с помощью linspace:", linspace_array)

# =========================
# Задание 5.2. Математические и статистические операции.
# =========================

# Создадим массив для дальнейших вычислений
data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# 1. Функция mean()
# — вычисляет среднее арифметическое элементов массива
mean_value = np.mean(data)
print("Среднее значение (mean):", mean_value)

# 2. Функция median()
# — медиана массива
median_value = np.median(data)
print("Медиана (median):", median_value)

# 3. Функция corrcoef()
# — коэффициент корреляции между двумя массивами
# Создадим второй массив с данными
data2 = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])
correlation = np.corrcoef(data, data2)
print("Коэффициент корреляции между data и data2:\n", correlation)

# 4. Дисперсия var()
# — дисперсия данных
variance = np.var(data)
print("Дисперсия (var):", variance)

# 5. Стандартное отклонение std()
# — стандартное отклонение данных
std_dev = np.std(data)
print("Стандартное отклонение (std):", std_dev)




#===========================================================================================
#===========================================================================================
#===========================================================================================


import numpy as np

n = 5  # количество строк
m = 4  # количество столбцов

A = np.random.randint(0, 101, size=(n, m))

print("Исходная матрица A:")
print(A)

A[-1] = np.sort(A[-1])

print("Матрица после сортировки последней строки:")
print(A)

print("Отсортированная последняя строка:")
print(A[-1])

# Вычисление медианы через стандартную функцию numpy
median_numpy = np.median(A[-1])
print("Медиана (через np.median): ", median_numpy)

# Вычисление медианы программным способом
sorted_row = np.sort(A[-1])
if m % 2 == 1:
    # нечётное число элементов
    median_manual = sorted_row[m // 2]
else:
    # чётное число элементов - среднее двух центральных элементов
    median_manual = (sorted_row[m // 2 - 1] + sorted_row[m // 2]) / 2

print("Медиана (программно): ", median_manual)