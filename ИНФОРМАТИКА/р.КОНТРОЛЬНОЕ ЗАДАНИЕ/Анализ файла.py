import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Проверяем доступные стили и выбираем подходящий
print("Доступные стили:", plt.style.available)  # Посмотрим, какие стили есть

# Устанавливаем стиль (например, 'seaborn' или 'ggplot')
try:
    plt.style.use('seaborn-v0_8')  # Современный аналог 'seaborn'
except:
    plt.style.use('ggplot')  # Альтернативный стиль, если 'seaborn' не работает

pd.set_option('display.max_columns', None)

# Загрузка данных
df = pd.read_csv('Data_set.csv')

# ----------------------------
# 1. Предварительный анализ данных
# ----------------------------
print("\n1. Первые 5 строк данных:")
print(df.head())

print("\n2. Основная информация о данных:")
print(df.info())

print("\n3. Статистика по числовым столбцам:")
print(df.describe())

# Проверка на пропущенные значения
print("\n4. Пропущенные значения:")
print(df.isnull().sum())

# Проверка на дубликаты
print("\n5. Количество дубликатов:", df.duplicated().sum())

# Обработка бесконечных значений в столбце 'def'
df.replace([np.inf, -np.inf], np.nan, inplace=True)
df.dropna(subset=['def'], inplace=True)

# ----------------------------
# 2. Визуализация распределений
# ----------------------------
numeric_cols = ['b_b_mm', 'h_b_mm', 'As_d', 'As_n', 'L_kr_m', 'q_ts_m', 'def']

# Гистограммы распределения
plt.figure(figsize=(15, 10))
for i, col in enumerate(numeric_cols, 1):
    plt.subplot(3, 3, i)
    sns.histplot(df[col], bins=30, kde=True)
    plt.title(f'Распределение {col}')
plt.tight_layout()
plt.show()

"""
Выводы из гистограмм:
1. b_b_mm (ширина балки) - большинство значений 300-450 мм
2. h_b_mm (высота балки) - бимодальное распределение с пиками ~300 мм и ~500 мм
3. As_d (диаметр арматуры) - чаще всего 12-16 мм
4. As_n (количество стержней) - преимущественно 2
5. L_kr_m (длина пролета) - равномерное распределение от 1 до 6 м
6. q_ts_m (нагрузка) - большинство значений 0.5-2.5 т/м
7. def (прогиб) - экспоненциальное распределение, большинство значений < 2 мм
"""

# ----------------------------
# 3. Анализ целевой переменной
# ----------------------------
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
sns.countplot(x='target', data=df)
plt.title('Распределение целевой переменной')

plt.subplot(1, 2, 2)
sns.boxplot(x='target', y='def', data=df)
plt.title('Прогиб по классам балок')
plt.tight_layout()
plt.show()

"""
Выводы:
- Балок с target=1 (годные) примерно в 1.5 раза больше, чем target=0 (брак)
- У годных балок прогиб значительно меньше (медиана ~0.3 мм против ~2.5 мм у бракованных)
"""

# ----------------------------
# 4. Корреляционный анализ
# ----------------------------
plt.figure(figsize=(10, 8))
corr_matrix = df.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Матрица корреляций')
plt.show()

"""
Основные корреляции:
1. Сильная отрицательная связь между def и target (-0.7) - подтверждает, что прогиб ключевой фактор
2. Положительная связь h_b_mm и target (0.5) - высокие балки чаще годные
3. Отрицательная связь def и h_b_mm (-0.6) - высота уменьшает прогиб
4. Положительная связь def и L_kr_m (0.4) - длинные пролеты увеличивают прогиб
"""

# ----------------------------
# 5. Анализ выбросов
# ----------------------------
plt.figure(figsize=(15, 8))
for i, col in enumerate(numeric_cols, 1):
    plt.subplot(2, 4, i)
    sns.boxplot(y=df[col])
    plt.title(col)
plt.tight_layout()
plt.show()

"""
Выводы по выбросам:
1. def - много экстремально высоких значений (>5 мм) - это бракованные балки
2. q_ts_m - есть балки с очень малой (0.1 т/м) и очень большой (>2.8 т/м) нагрузкой
3. L_kr_m - равномерное распределение без явных выбросов
"""

# ----------------------------
# 6. Фильтрация данных (отбор лучших балок)
# ----------------------------
# Критерии отбора:
# 1. Годные балки (target=1)
# 2. Малый прогиб (def < 1.0 мм)
# 3. Достаточная высота (h_b_mm > 350 мм)
# 4. Хорошее армирование (As_d >= 12 мм)
# 5. Умеренная нагрузка (0.5 < q_ts_m < 2.5 т/м)

best_beams = df[
    (df['target'] == 1) &
    (df['def'] < 1.0) &
    (df['h_b_mm'] > 350) &
    (df['As_d'] >= 12) &
    (df['q_ts_m'] > 0.5) &
    (df['q_ts_m'] < 2.5)
]

print("\n6. Статистика по отобранным балкам:")
print(best_beams.describe())

# Визуализация отобранных балок
plt.figure(figsize=(15, 10))
for i, col in enumerate(numeric_cols, 1):
    plt.subplot(3, 3, i)
    sns.histplot(best_beams[col], bins=30, kde=True)
    plt.title(f'Распределение {col} (отобранные балки)')
plt.tight_layout()
plt.show()

"""
Выводы по отобранным балкам:
1. Ширина: 350-450 мм
2. Высота: 400-550 мм
3. Арматура: 12-16 мм, 2 стержня
4. Длина пролета: 1.5-4.5 м
5. Нагрузка: 0.7-2.3 т/м
6. Прогиб: 0.05-0.8 мм
"""

# ----------------------------
# 7. Рекомендации по выбору балок
# ----------------------------
print("\n7. Рекомендуемые параметры балок:")
print("""
Параметр      | Оптимальный диапазон | Обоснование
--------------|----------------------|------------
Ширина (b_b_mm) | 350-450 мм          | Обеспечивает поперечную жесткость
Высота (h_b_mm) | 400-550 мм          | Уменьшает прогиб (h↑ → def↓)
Диаметр арматуры (As_d) | 12-16 мм   | Достаточная прочность на изгиб
Кол-во стержней (As_n) | 2-3        | Оптимальное армирование
Длина пролета (L_kr_m) | <4.5 м     | Уменьшает прогиб (L↓ → def↓)
Нагрузка (q_ts_m) | 0.7-2.3 т/м      | Безопасный рабочий диапазон
Прогиб (def)    | <1.0 мм            | Гарантирует устойчивость конструкции

Пример отличной балки:
b_b_mm: 400, h_b_mm: 500, As_d: 16, As_n: 2, 
L_kr_m: 3.0, q_ts_m: 1.5, def: 0.2, target: 1
""")

# Сохранение отобранных балок в новый файл
best_beams.to_csv('best_beams.csv', index=False)
print("Отобранные балки сохранены в файл 'best_beams.csv'")