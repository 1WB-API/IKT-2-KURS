import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# =============================================
# 1. ЗАГРУЗКА ОТФИЛЬТРОВАННЫХ ДАННЫХ
# =============================================

# Загрузка данных из файла с хорошими балками
try:
    best_beams = pd.read_csv('best_beams.csv')
    print(f"Загружено {len(best_beams)} балок из файла best_beams.csv")
except FileNotFoundError:
    print("Ошибка: Файл best_beams.csv не найден!")
    exit()

# =============================================
# 2. РАНЖИРОВАНИЕ БАЛОК ПО КАЧЕСТВУ
# =============================================

# Расчет комплексного рейтинга для каждой балки
best_beams['score'] = (
    (1 / best_beams['def']) * 0.4 +                  # Минимальный прогиб (40% веса)
    (best_beams['h_b_mm'] / best_beams['b_b_mm']) * 0.3 +  # Оптимальное h/b (30%)
    (1 / np.abs(best_beams['q_ts_m'] - 1.5)) * 0.2 + # Близость к нагрузке 1.5 т/м (20%)
    (1 / best_beams['L_kr_m']) * 0.1                 # Предпочтение коротким пролетам (10%)
)

# Сортировка по рейтингу (по убыванию)
top_beams = best_beams.sort_values('score', ascending=False)

# Выбор топ-10 балок
top_10 = top_beams.head(10).copy()

# Добавляем столбец с оригинальными номерами
top_10['original_index'] = top_10.index

# =============================================
# 3. ВИЗУАЛИЗАЦИЯ РЕЗУЛЬТАТОВ
# =============================================

# Настройка стиля графиков
plt.style.use('seaborn-v0_8')
plt.figure(figsize=(12, 6))

# График рейтинга топ-10 балок
plt.subplot(1, 2, 1)
sns.barplot(x='original_index', y='score', data=top_10, palette='viridis')
plt.title('Топ-10 балок по рейтингу')
plt.xlabel('Номер в исходных данных')
plt.ylabel('Рейтинг качества')
plt.xticks(rotation=45)

# Boxplot ключевых параметров
plt.subplot(1, 2, 2)
sns.boxplot(data=top_10[['def', 'h_b_mm', 'b_b_mm', 'q_ts_m']])
plt.title('Распределение параметров топ-10')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# =============================================
# 4. АНАЛИЗ И ВЫВОД РЕЗУЛЬТАТОВ
# =============================================

# Вывод таблицы с лучшими балками
print("\n=== ТОП-10 ЛУЧШИХ БАЛОК ===")
print(top_10[['original_index', 'b_b_mm', 'h_b_mm', 'As_d', 'As_n', 
             'L_kr_m', 'q_ts_m', 'def', 'score']].to_string(index=False))

# Сохранение результатов
top_10.to_csv('top_10_beams_final.csv', index=False)
print("\nСохранено в top_10_beams_final.csv")

# Вывод номеров лучших балок
print("\nНомера лучших балок в исходном файле:", top_10['original_index'].tolist())

# =============================================
# 5. ИТОГОВЫЕ ВЫВОДЫ
# =============================================

print("""
=== КРИТЕРИИ ОТБОРА ЛУЧШИХ БАЛОК ===

1. Основные параметры:
   - Прогиб (def): < 0.3 мм (чем меньше, тем лучше)
   - Соотношение h/b: 1.2-1.5 (оптимальная жесткость)
   - Нагрузка (q_ts_m): 1.0-2.0 т/м (безопасный диапазон)
   - Длина пролета (L_kr_m): < 4.0 м (лучшая устойчивость)

2. Рекомендации:
   - Лучшие варианты находятся в файле top_10_beams_final.csv
   - Особое внимание к балкам с наивысшим score
   - При равном рейтинге предпочитать балки с меньшей длиной пролета

3. Пример идеальной балки:
   b_b_mm: 400, h_b_mm: 500, As_d: 16, As_n: 2
   L_kr_m: 3.0, q_ts_m: 1.5, def: 0.15, score: >9.5
""")